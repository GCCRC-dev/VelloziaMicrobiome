library(ggplot2)
library(tidyverse)
biom <- read_tsv("biom.txt",
col_types = cols(Group = col_character(),
.default = col_double())) %>%
rename_all(tolower) %>%
select(group, starts_with("asv")) %>%
pivot_longer(-group, names_to="asv", values_to="count")
taxonomy <- read_tsv("taxonomy.txt")%>%
rename_all(tolower) %>%
separate(taxonomy, into=c("kingdom","phylum","class","order","family","genus","species"), sep=";")
View(taxonomy)
composite <- inner_join(biom, taxonomy, by="asv") %>%
group_by(group, asv) %>%
summarize(count = sum(count), .groups="drop") %>%
group_by(group) %>%
mutate(rel_abund = count / sum(count)*100) %>%
ungroup() %>%
inner_join(taxonomy, composite, by="asv")  %>%
pivot_longer(cols=c("kingdom","phylum","class","order","family","genus","species","asv"),
names_to="level",
values_to="taxon")
metadata <- read_tsv("metadata.txt",
col_types=cols(sample = col_character())) %>%
rename_all(tolower) %>%
rename(group = sample)
phylum <-composite %>%
filter(level == "phylum") %>%
group_by(group) %>%
mutate(total = sum(count)) %>%
ungroup() %>%
filter(total > 1000) %>%
group_by(group,taxon) %>%
summarize(rel_abund = sum(rel_abund),
.groups="drop") %>%
inner_join(metadata, phylum, by = "group") %>%
group_by(replic,taxon) %>%
summarize(mean_rel_abund = mean(rel_abund),
.groups="drop") %>%
filter(mean_rel_abund != "NaN" & mean_rel_abund != 0.0000000000) %>%
group_by(taxon) %>%
mutate(pool = mean_rel_abund < 3,
.groups ="drop") %>%
mutate(taxon = if_else(pool, "Others", taxon)) %>%
group_by(replic, taxon) %>%
summarize(mean_rel_abund = sum(mean_rel_abund), .groups = "drop") %>%
mutate(replic = factor(replic,levels=c("Vn_Lb_S","Vt_Lb_S","Vn_Lb_F","Vt_Lb_F",
"Vn_Lb_J","Vt_Lb_J", "Vn_Lb_A","Vt_Lb_A",
"Vi_Lb_S","Vp_Lb_S","Vi_Lb_F","Vp_Lb_F",
"Vi_Lb_J","Vp_Lb_J","Vi_Lb_A","Vp_Lb_A",
"Vn_Dsh_S","Vt_Dsh_S","Vn_Dsh_F","Vt_Dsh_F",
"Vn_Dsh_J","Vt_Dsh_J", "Vn_Dsh_A","Vt_Dsh_A",
"Vi_Dsh_S","Vp_Dsh_S","Vi_Dsh_F","Vp_Dsh_F",
"Vi_Dsh_J","Vp_Dsh_J","Vi_Dsh_A","Vp_Dsh_A",
"Vn_Ar_S","Vt_Ar_S","Vn_Ar_F","Vt_Ar_F",
"Vn_Ar_J","Vt_Ar_J", "Vn_Ar_A","Vt_Ar_A",
"Vi_Ar_S","Vp_Ar_S","Vi_Ar_F","Vp_Ar_F",
"Vi_Ar_J","Vp_Ar_J","Vi_Ar_A","Vp_Ar_A",
"Vn_Ur_S","Vt_Ur_S","Vn_Ur_F","Vt_Ur_F",
"Vn_Ur_J","Vt_Ur_J", "Vn_Ur_A","Vt_Ur_A",
"Vi_Ur_S","Vp_Ur_S","Vi_Ur_F","Vp_Ur_F",
"Vi_Ur_J","Vp_Ur_J","Vi_Ur_A","Vp_Ur_A",
"Vn_S_S","Vt_S_S","Vn_S_F","Vt_S_F",
"Vn_S_J","Vt_S_J", "Vn_S_A","Vt_S_A",
"Vi_S_S","Vp_S_S","Vi_S_F","Vp_S_F",
"Vi_S_J","Vp_S_J","Vi_S_A","Vp_S_A")))
# Ensure taxon is a factor
phylum$taxon <- factor(phylum$taxon)
# Identify the levels excluding "Others" and "unclassified"
other_levels <- setdiff(levels(phylum$taxon), c("Others", "unclassified"))
# Add "Others" and "unclassified" to the end of the levels
new_levels <- c(other_levels, "Others", "unclassified")
# Reorder the levels in the taxon factor
phylum$taxon <- factor(phylum$taxon, levels = new_levels)
# Define a scientific core palette with 13 colors
scientific_palette <- c("#1f78b4", "#33a02c", "lightblue", "#e31a1c", "#ff7f00","#6a3d9a",
"#a6cee3", "#b2df8a", "#fb9a99", "#fdbf6f", "#cab2d6",
"#17becf", "#dbdb8d", "#8c564b","#9467bd")
barchart <- df %>%
ggplot(aes(x = replic, y = mean_rel_abund, fill = taxon)) +
geom_col() +
scale_fill_manual(values = scientific_palette, name = NULL) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = NULL, y = "Relative Abundance (%)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1),
legend.text = element_text(face = "italic"),
legend.key.size = unit(10, "pt"))
print(barchart)
library(ggplot2)
barchart <- df %>%
ggplot(aes(x = replic, y = mean_rel_abund, fill = taxon)) +
geom_col() +
scale_fill_manual(values = scientific_palette, name = NULL) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = NULL, y = "Relative Abundance (%)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1),
legend.text = element_text(face = "italic"),
legend.key.size = unit(10, "pt"))
barchart <- phylum %>%
ggplot(aes(x = replic, y = mean_rel_abund, fill = taxon)) +
geom_col() +
scale_fill_manual(values = scientific_palette, name = NULL) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = NULL, y = "Relative Abundance (%)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1),
legend.text = element_text(face = "italic"),
legend.key.size = unit(10, "pt"))
print(barchart)
library(ggplot2)
library(tidyverse)
library(microbiome)
library(ggpubr)
library(patchwork)
library(stringr)
asv_mat <- read_tsv("phyloseq_biom.txt")
samples_df <- read_tsv("metadata.txt")
tax_mat <-read_tsv("phyloseq_taxonomy.txt")
asv_mat <- asv_mat %>%
tibble::column_to_rownames("asv")
tax_mat <- tax_mat %>%
tibble::column_to_rownames("asv")
samples_df <- samples_df %>%
tibble::column_to_rownames("sample")
asv_matx <- as.matrix(asv_mat)
asv_mat <- as.matrix(asv_mat)
tax_mat <- as.matrix(tax_mat)
asv = otu_table(asv_mat, taxa_are_rows = TRUE)
samples = sample_data(samples_df)
pseq <- phyloseq(asv, samples)
sample_totals <- sample_sums(pseq)
# Identify samples to keep (those with total sequences >= 5000)
samples_to_keep <- names(sample_totals[sample_totals >= 5000])
# Subset the phyloseq object
pseq_filtered <- prune_samples(samples_to_keep, pseq)
pseq <-pseq_filtered
pseq.rarified <- rarefy_even_depth(pseq, sample.size = "5000", rngseed = 290193, replace = F)
pseq.rel <- microbiome::transform(pseq.rarified, "compositional")
tab <-microbiome::alpha(pseq.rel, index = "all")
pseq.rel.meta <- microbiome::meta(pseq.rel)
pseq.rel.meta$Shannon <- tab$diversity_shannon
pseq.rel.meta$strategy <- as.factor(pseq.rel.meta$strategy)
pseq.rel.meta$season <- as.factor(pseq.rel.meta$season)
pseq.rel.meta$bodysite <- as.factor(pseq.rel.meta$bodysite)
strategy <- levels(pseq.rel.meta$strategy)
season <- levels(pseq.rel.meta$season)
bodysite <-levels(pseq.rel.meta$bodysite)
strategy.pairs <- combn(seq_along(strategy), 2, simplify = FALSE, FUN = function(i)strategy[i])
season.pairs <- combn(seq_along(season), 2, simplify = FALSE, FUN = function(i)season[i])
bodysite.pairs <- combn(seq_along(bodysite), 2, simplify = FALSE, FUN = function(i)bodysite[i])
pseq.rel.meta$bodysite <- factor(pseq.rel.meta$bodysite, levels = c("Lb", "Dsh", "Ar", "Ur", "S"))
shannon_bodysite <- ggviolin(pseq.rel.meta, x = "bodysite", y = "Shannon",
add = "boxplot", fill = "bodysite",
palette = c(Lb = "green", Dsh = "blue", Ar = "red2", S = "purple", Ur = "orange"))
shannon_bodysite <- shannon_bodysite +
stat_compare_means(comparisons = bodysite.pairs, method = "wilcox.test") +
labs(y = "Shannon index") +
xlab("") +
theme(legend.position = "none")
print(shannon_bodysite)
pseq.rel.meta$strategy <- factor(pseq.rel.meta$strategy, levels = c("DT", "NDT"))
shannon_strategy <- ggviolin(pseq.rel.meta, x = "strategy", y = "Shannon",
add = "boxplot", fill = "strategy",
palette = c(DT="orange",NDT="green"))
shannon_strategy  <- shannon_strategy  +
stat_compare_means(comparisons = strategy.pairs, method = "wilcox.test") +
labs(y = "Shannon index") +
xlab("") +
theme(legend.position = "none")
print(shannon_strategy)
pseq.rel.meta$season <- factor(pseq.rel.meta$season, levels = c("Early Rainy", "Late Rainy", "Early Dry", "Late Dry"))
shannon_season <- ggviolin(pseq.rel.meta, x = "season", y = "Shannon",
add = "boxplot", fill = "season",
palette = c('Early Rainy'="lightblue",'Late Rainy'="blue",'Early Dry'="orange",'Late Dry'="red"))
shannon_season <- shannon_season +
stat_compare_means(comparisons = season.pairs, method = "wilcox.test") +
labs(y = "Shannon index") +
xlab("") +
theme(legend.position = "none") +
scale_x_discrete(labels = c("Early Rainy" = "Early\nRainy",
"Late Rainy" = "Late\nRainy",
"Early Dry" = "Early\nDry",
"Late Dry" = "Late\nDry"))
print(shannon_season)
combined_plot <- shannon_bodysite + shannon_strategy + shannon_season +
plot_layout(ncol = 3)
print(combined_plot)
library(Maaslin2)
library(tidyverse)
library(ggplot2)
df_input_metadata <- read.table(file = "metadata_maaslin2.txt",
header = TRUE,
sep = "\t",
row.names = 1,
stringsAsFactors = FALSE)
setwd("/Users/otavio/Library/CloudStorage/Dropbox/Artigo_Scientifica_Data_2024/Code_files/shotgun")
library(Maaslin2)
library(tidyverse)
library(ggplot2)
df_input_metadata <- read.table(file = "metadata_maaslin2.txt",
header = TRUE,
sep = "\t",
row.names = 1,
stringsAsFactors = FALSE)
df_input_path = read.csv("rpk-CPM_pathabundance_unstratified.txt",
sep              = "\t",
stringsAsFactors = FALSE,
row.names        = 1)
fit_data = Maaslin2(
input_data = df_input_path,
input_metadata = df_input_metadata,
output = "pathway_cpm_test",
normalization = "NONE",
transform = "NONE",
fixed_effects = c("strategy","season"),
reference = c("strategy","NDT"))
fit_data = Maaslin2(
input_data = df_input_path,
input_metadata = df_input_metadata,
output = "pathway_cpm",
normalization = "NONE",
transform = "NONE",
fixed_effects = c("strategy","season"),
reference = c("strategy","NDT"))
# Read the data
significant_pathway <- read_tsv("pathway_cpm/significant_results.tsv")
sig <- significant_pathway %>%
filter(qval < 0.05 & metadata %in% c("strategy", "season")) %>%
filter(!grepl("UNGROUPED|AMBIGUOUS|UNINTEGRATED", feature))
table(sig$metadata)
write_tsv(sig, file = "TableS3.tsv")
